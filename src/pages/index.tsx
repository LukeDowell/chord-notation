import Head from 'next/head'
import '@/styles/index.module.css'
import {styled} from "@mui/material/styles";
import React, {useEffect, useState} from "react";
import MIDIPiano from "@/lib/music/MIDIPiano";
import PracticePage from "@/components/practice/PracticePage";
import {Chord, toChord} from "@/lib/music/Chord";
import {GetStaticProps} from "next";


const StyledRoot = styled('div')({
  display: "flex",
  flexDirection: "column",
  textAlign: "center",
  justifyContent: "space-between",
  width: '100%',
  height: '1000px',
})

export const getStaticProps: GetStaticProps = () => {
  return {
    props: {
      initialChord: toChord("Dbmaj7")
    }
  }
}

export default function HomePage({ initialChord = toChord("Dbmaj7") }: {initialChord: Chord}) {
  const [hasLoadedMidi, setHasLoadedMidi] = useState(false)
  const [midiPiano, setMidiPiano] = useState<MIDIPiano | undefined>(undefined)
  const [midiAccess, setMidiAccess] = useState<WebMidi.MIDIAccess | undefined>(undefined)
  const [isCompatibleBrowser, setIsCompatibleBrowser] = useState(false)
  const [errorMessage, setErrorMessage] = useState<string>("")

  useEffect(() => {
    if (hasLoadedMidi) return
    try {
      navigator.requestMIDIAccess().then((m) => {
        setIsCompatibleBrowser(true)
        setMidiAccess(m)
        if (m.inputs.size === 0) return
        else setMidiAccess(m) // Update our access to store new inputs
        const firstInputKey = m.inputs.keys().next().value
        const firstInput = m.inputs.get(firstInputKey)
        if (firstInput) {
          const piano = new MIDIPiano(firstInput)
          setMidiPiano(piano)
          setHasLoadedMidi(true)
          setErrorMessage("")
        } else throw new Error(`${firstInputKey} not a valid MIDI input id!`)
      })
    } catch (e: any) {
      if (e instanceof TypeError) {
        setIsCompatibleBrowser(false)
      } else if (e?.message.includes(" not a valid MIDI input id!"))
        console.debug(e)
    }
  }, [hasLoadedMidi, midiPiano])

  useEffect(() => {
    if (!midiAccess && !isCompatibleBrowser) {
      setErrorMessage("Your browser does not provide MIDI access, please use Chrome, Safari or Edge on a desktop or android device")
    } else if (!midiPiano && midiAccess && isCompatibleBrowser) {
      setErrorMessage("Your browser supports MIDI access, but a MIDI device could not be found")
    }
  }, [isCompatibleBrowser, midiPiano, midiAccess])

  return (
    <>
      <Head>
        <title>Flash Chords</title>
        <meta name="description" content="Generated by create next app"/>
        <meta name="viewport" content="width=device-width, initial-scale=1"/>
      </Head>
      <StyledRoot>
        <PracticePage piano={midiPiano || new MIDIPiano()} initialChord={initialChord}/>
        {errorMessage.length > 0 &&
          <h3>{errorMessage}</h3>
        }
      </StyledRoot>
    </>
  )
}
